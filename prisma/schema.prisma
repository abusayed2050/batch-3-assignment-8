// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  bookId          String    @id @default(uuid()) 
  title           String
  genre           String
  publishedYear   Int       
  totalCopies     Int       
  availableCopies Int       
  authorId        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  borrowRecord    BorrowRecord[]

  author          Author?    @relation(fields: [authorId], references: [authorId]) // Each book has one author

  @@map("books")

}

model Author {
  authorId    String    @id @default(uuid()) 
  name        String
  bio         String?    
  dateOfBirth DateTime 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  books       Book[]    // One author can have multiple books

  @@map("authors")
}

model Member {
  memberId       String    @id @default(uuid()) 
  name           String
  email          String    @unique
  phone          String
  membershipDate DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  borrowRecords  BorrowRecord[]

  @@map("members")
}

model BorrowRecord {
  borrowId    String    @id @default(uuid()) 
  borrowDate  DateTime      
  returnDate  DateTime?     
  bookId      String
  memberId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
 
  book        Book      @relation(fields: [bookId], references: [bookId])
  Member      Member    @relation(fields: [memberId], references: [memberId])
  
  @@map("borrow_records")
}
